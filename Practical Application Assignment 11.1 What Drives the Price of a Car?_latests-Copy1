{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3d0bd7c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.model_selection import train_test_split, cross_val_score, KFold, GridSearchCV, RandomizedSearchCV\n",
    "from sklearn.preprocessing import OneHotEncoder,OrdinalEncoder, StandardScaler, MinMaxScaler\n",
    "from sklearn.compose import make_column_transformer, ColumnTransformer\n",
    "import statsmodels.api as sm\n",
    "from sklearn.feature_selection import mutual_info_regression\n",
    "from sklearn.ensemble import RandomForestRegressor, ExtraTreesRegressor\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.svm import SVR\n",
    "from sklearn.metrics import mean_squared_error\n",
    "sns.set()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "89a2b81c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>region</th>\n",
       "      <th>price</th>\n",
       "      <th>year</th>\n",
       "      <th>manufacturer</th>\n",
       "      <th>model</th>\n",
       "      <th>condition</th>\n",
       "      <th>cylinders</th>\n",
       "      <th>fuel</th>\n",
       "      <th>odometer</th>\n",
       "      <th>title_status</th>\n",
       "      <th>transmission</th>\n",
       "      <th>VIN</th>\n",
       "      <th>drive</th>\n",
       "      <th>size</th>\n",
       "      <th>type</th>\n",
       "      <th>paint_color</th>\n",
       "      <th>state</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7222695916</td>\n",
       "      <td>prescott</td>\n",
       "      <td>6000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>az</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7218891961</td>\n",
       "      <td>fayetteville</td>\n",
       "      <td>11900</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>ar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7221797935</td>\n",
       "      <td>florida keys</td>\n",
       "      <td>21000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>fl</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7222270760</td>\n",
       "      <td>worcester / central MA</td>\n",
       "      <td>1500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>ma</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7210384030</td>\n",
       "      <td>greensboro</td>\n",
       "      <td>4900</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>nc</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           id                  region  price  year manufacturer model  \\\n",
       "0  7222695916                prescott   6000   NaN          NaN   NaN   \n",
       "1  7218891961            fayetteville  11900   NaN          NaN   NaN   \n",
       "2  7221797935            florida keys  21000   NaN          NaN   NaN   \n",
       "3  7222270760  worcester / central MA   1500   NaN          NaN   NaN   \n",
       "4  7210384030              greensboro   4900   NaN          NaN   NaN   \n",
       "\n",
       "  condition cylinders fuel  odometer title_status transmission  VIN drive  \\\n",
       "0       NaN       NaN  NaN       NaN          NaN          NaN  NaN   NaN   \n",
       "1       NaN       NaN  NaN       NaN          NaN          NaN  NaN   NaN   \n",
       "2       NaN       NaN  NaN       NaN          NaN          NaN  NaN   NaN   \n",
       "3       NaN       NaN  NaN       NaN          NaN          NaN  NaN   NaN   \n",
       "4       NaN       NaN  NaN       NaN          NaN          NaN  NaN   NaN   \n",
       "\n",
       "  size type paint_color state  \n",
       "0  NaN  NaN         NaN    az  \n",
       "1  NaN  NaN         NaN    ar  \n",
       "2  NaN  NaN         NaN    fl  \n",
       "3  NaN  NaN         NaN    ma  \n",
       "4  NaN  NaN         NaN    nc  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_csv('/Users/priti16/Downloads/practical_application_II_starter-2/data/vehicles.csv')\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "890b02d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = data.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "734e64de",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(426880, 18)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f22b8767",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 426880 entries, 0 to 426879\n",
      "Data columns (total 18 columns):\n",
      " #   Column        Non-Null Count   Dtype  \n",
      "---  ------        --------------   -----  \n",
      " 0   id            426880 non-null  int64  \n",
      " 1   region        426880 non-null  object \n",
      " 2   price         426880 non-null  int64  \n",
      " 3   year          425675 non-null  float64\n",
      " 4   manufacturer  409234 non-null  object \n",
      " 5   model         421603 non-null  object \n",
      " 6   condition     252776 non-null  object \n",
      " 7   cylinders     249202 non-null  object \n",
      " 8   fuel          423867 non-null  object \n",
      " 9   odometer      422480 non-null  float64\n",
      " 10  title_status  418638 non-null  object \n",
      " 11  transmission  424324 non-null  object \n",
      " 12  VIN           265838 non-null  object \n",
      " 13  drive         296313 non-null  object \n",
      " 14  size          120519 non-null  object \n",
      " 15  type          334022 non-null  object \n",
      " 16  paint_color   296677 non-null  object \n",
      " 17  state         426880 non-null  object \n",
      "dtypes: float64(2), int64(2), object(14)\n",
      "memory usage: 58.6+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e04717ec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>price</th>\n",
       "      <th>year</th>\n",
       "      <th>odometer</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>4.268800e+05</td>\n",
       "      <td>4.268800e+05</td>\n",
       "      <td>425675.00</td>\n",
       "      <td>422480.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>7.311487e+09</td>\n",
       "      <td>7.519903e+04</td>\n",
       "      <td>2011.24</td>\n",
       "      <td>98043.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>4.473170e+06</td>\n",
       "      <td>1.218228e+07</td>\n",
       "      <td>9.45</td>\n",
       "      <td>213881.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>7.207408e+09</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1900.00</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>7.308143e+09</td>\n",
       "      <td>5.900000e+03</td>\n",
       "      <td>2008.00</td>\n",
       "      <td>37704.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>7.312621e+09</td>\n",
       "      <td>1.395000e+04</td>\n",
       "      <td>2013.00</td>\n",
       "      <td>85548.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>7.315254e+09</td>\n",
       "      <td>2.648575e+04</td>\n",
       "      <td>2017.00</td>\n",
       "      <td>133542.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>7.317101e+09</td>\n",
       "      <td>3.736929e+09</td>\n",
       "      <td>2022.00</td>\n",
       "      <td>10000000.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 id         price       year     odometer\n",
       "count  4.268800e+05  4.268800e+05  425675.00    422480.00\n",
       "mean   7.311487e+09  7.519903e+04    2011.24     98043.33\n",
       "std    4.473170e+06  1.218228e+07       9.45    213881.50\n",
       "min    7.207408e+09  0.000000e+00    1900.00         0.00\n",
       "25%    7.308143e+09  5.900000e+03    2008.00     37704.00\n",
       "50%    7.312621e+09  1.395000e+04    2013.00     85548.00\n",
       "75%    7.315254e+09  2.648575e+04    2017.00    133542.50\n",
       "max    7.317101e+09  3.736929e+09    2022.00  10000000.00"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe().round(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a3f6815a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>region</th>\n",
       "      <th>manufacturer</th>\n",
       "      <th>model</th>\n",
       "      <th>condition</th>\n",
       "      <th>cylinders</th>\n",
       "      <th>fuel</th>\n",
       "      <th>title_status</th>\n",
       "      <th>transmission</th>\n",
       "      <th>VIN</th>\n",
       "      <th>drive</th>\n",
       "      <th>size</th>\n",
       "      <th>type</th>\n",
       "      <th>paint_color</th>\n",
       "      <th>state</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>426880</td>\n",
       "      <td>409234</td>\n",
       "      <td>421603</td>\n",
       "      <td>252776</td>\n",
       "      <td>249202</td>\n",
       "      <td>423867</td>\n",
       "      <td>418638</td>\n",
       "      <td>424324</td>\n",
       "      <td>265838</td>\n",
       "      <td>296313</td>\n",
       "      <td>120519</td>\n",
       "      <td>334022</td>\n",
       "      <td>296677</td>\n",
       "      <td>426880</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>404</td>\n",
       "      <td>42</td>\n",
       "      <td>29649</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>118246</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>13</td>\n",
       "      <td>12</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>columbus</td>\n",
       "      <td>ford</td>\n",
       "      <td>f-150</td>\n",
       "      <td>good</td>\n",
       "      <td>6 cylinders</td>\n",
       "      <td>gas</td>\n",
       "      <td>clean</td>\n",
       "      <td>automatic</td>\n",
       "      <td>1FMJU1JT1HEA52352</td>\n",
       "      <td>4wd</td>\n",
       "      <td>full-size</td>\n",
       "      <td>sedan</td>\n",
       "      <td>white</td>\n",
       "      <td>ca</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>3608</td>\n",
       "      <td>70985</td>\n",
       "      <td>8009</td>\n",
       "      <td>121456</td>\n",
       "      <td>94169</td>\n",
       "      <td>356209</td>\n",
       "      <td>405117</td>\n",
       "      <td>336524</td>\n",
       "      <td>261</td>\n",
       "      <td>131904</td>\n",
       "      <td>63465</td>\n",
       "      <td>87056</td>\n",
       "      <td>79285</td>\n",
       "      <td>50614</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          region manufacturer   model condition    cylinders    fuel  \\\n",
       "count     426880       409234  421603    252776       249202  423867   \n",
       "unique       404           42   29649         6            8       5   \n",
       "top     columbus         ford   f-150      good  6 cylinders     gas   \n",
       "freq        3608        70985    8009    121456        94169  356209   \n",
       "\n",
       "       title_status transmission                VIN   drive       size  \\\n",
       "count        418638       424324             265838  296313     120519   \n",
       "unique            6            3             118246       3          4   \n",
       "top           clean    automatic  1FMJU1JT1HEA52352     4wd  full-size   \n",
       "freq         405117       336524                261  131904      63465   \n",
       "\n",
       "          type paint_color   state  \n",
       "count   334022      296677  426880  \n",
       "unique      13          12      51  \n",
       "top      sedan       white      ca  \n",
       "freq     87056       79285   50614  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe(include='object')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "da3e4e34",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 6000, 11900, 21000, ...,  6328, 19853, 17873])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['price'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f85db009",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['price'] = [0 if i=='-' else int(i) for i in df['price']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "90437d35",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('int64')"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['price'].dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "937049a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([nan, 'gmc', 'chevrolet', 'toyota', 'ford', 'jeep', 'nissan', 'ram',\n",
       "       'mazda', 'cadillac', 'honda', 'dodge', 'lexus', 'jaguar', 'buick',\n",
       "       'chrysler', 'volvo', 'audi', 'infiniti', 'lincoln', 'alfa-romeo',\n",
       "       'subaru', 'acura', 'hyundai', 'mercedes-benz', 'bmw', 'mitsubishi',\n",
       "       'volkswagen', 'porsche', 'kia', 'rover', 'ferrari', 'mini',\n",
       "       'pontiac', 'fiat', 'tesla', 'saturn', 'mercury', 'harley-davidson',\n",
       "       'datsun', 'aston-martin', 'land rover', 'morgan'], dtype=object)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['manufacturer'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "55f2abf6",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'float' object has no attribute 'split'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[12], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmanufacturer\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m [\u001b[38;5;28mfloat\u001b[39m(i\u001b[38;5;241m.\u001b[39msplit()[\u001b[38;5;241m0\u001b[39m]) \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmanufacturer\u001b[39m\u001b[38;5;124m'\u001b[39m]]\n",
      "Cell \u001b[0;32mIn[12], line 1\u001b[0m, in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[0;32m----> 1\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmanufacturer\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m [\u001b[38;5;28mfloat\u001b[39m(i\u001b[38;5;241m.\u001b[39msplit()[\u001b[38;5;241m0\u001b[39m]) \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmanufacturer\u001b[39m\u001b[38;5;124m'\u001b[39m]]\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'float' object has no attribute 'split'"
     ]
    }
   ],
   "source": [
    "df['manufacturer'] = [float(i.split()[0]) for i in df['manufacturer']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ed136f9f",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['manufacturer'].dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1ab0faad",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['odometer'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f5b1547",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['odometer'] = [float(i.split()[0]) for i in df['odometer']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e555d32c",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['odometer'].dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "54472f02",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "737cfaf5",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop('title_status',axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b0bb80d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1bc3f9a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2328d1fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c19122a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c95dc3b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "80283080",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "979f3780",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "776400b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop('id',axis=1,inplace=True) # Here ID column was dropped because there is no importance of the column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "55e575d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "503f9bf2",
   "metadata": {},
   "outputs": [],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bc0ce608",
   "metadata": {},
   "outputs": [],
   "source": [
    "numerical_data = df.select_dtypes(include='number')\n",
    "numerical_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2e461892",
   "metadata": {},
   "outputs": [],
   "source": [
    "categorical_data = df.select_dtypes(include='object')\n",
    "categorical_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8c4c68f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, axes = plt.subplots(3,2, figsize=(10, 10))\n",
    "\n",
    "axes[0,0].hist(numerical_data['price'])\n",
    "axes[0,1].hist(numerical_data['year'])\n",
    "axes[1,0].hist(numerical_data['odometer'])\n",
    "\n",
    "\n",
    "axes[0, 0].set_title('price')\n",
    "axes[0, 1].set_title('year')\n",
    "axes[1, 0].set_title('odometer')\n",
    "\n",
    "\n",
    "plt.suptitle('Histograms of Numerical Features', fontsize = 16)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f18f3755",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, axes = plt.subplots(3,2, figsize=(10, 10))\n",
    "\n",
    "sns.kdeplot(numerical_data['price'], fill=True, ax=axes[0,0])\n",
    "sns.kdeplot(numerical_data['year'], fill=True, ax=axes[0,1])\n",
    "sns.kdeplot(numerical_data['odometer'], fill=True, ax=axes[1,0])\n",
    "\n",
    "fig.suptitle('Distribution of Numerical Features', fontsize=16)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2004daf1",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, axes = plt.subplots(3,2, figsize=(10, 10))\n",
    "\n",
    "axes[0,0].boxplot(numerical_data['price'])\n",
    "axes[0,1].boxplot(numerical_data['year'])\n",
    "axes[1,0].boxplot(numerical_data['odometer'])\n",
    "\n",
    "\n",
    "axes[0, 0].set_title('price')\n",
    "axes[0, 1].set_title('year')\n",
    "axes[1, 0].set_title('odometer')\n",
    "\n",
    "plt.suptitle('Boxplots of Numerical Features', fontsize=16)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ec86d55f",
   "metadata": {},
   "outputs": [],
   "source": [
    "price_selected = numerical_data[numerical_data['price']<100000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aa509bd0",
   "metadata": {},
   "outputs": [],
   "source": [
    "len(price_selected)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cc5d3774",
   "metadata": {},
   "outputs": [],
   "source": [
    "price_selected = price_selected.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6fef662e",
   "metadata": {},
   "outputs": [],
   "source": [
    "price_selected"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "55f535bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.hist(price_selected['price'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f991fde6",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.boxplot(price_selected['price'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dd832b7f",
   "metadata": {},
   "outputs": [],
   "source": [
    "sns.kdeplot(np.sqrt(price_selected['price']), fill=True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "556d4f17",
   "metadata": {},
   "outputs": [],
   "source": [
    "class IQR:\n",
    "    def __init__(self, feature, data):\n",
    "        self.feature = feature\n",
    "        self.data = data\n",
    "\n",
    "    def calculate_iqr(self):\n",
    "        q1 = np.percentile(self.data[self.feature], 25)\n",
    "        q3 = np.percentile(self.data[self.feature], 75)\n",
    "        iqr = q3 - q1\n",
    "        lower_limit = q1 - 1.5 * iqr\n",
    "        upper_limit = q3 + 1.5 * iqr\n",
    "        self.outliers = self.data[((self.data[self.feature] < lower_limit) | (self.data[self.feature] > upper_limit))]\n",
    "        return  {\n",
    "            'q1': q1,\n",
    "            'q3': q3,\n",
    "            'iqr': iqr,\n",
    "            'lower_limit': lower_limit,\n",
    "            'upper_limit': upper_limit\n",
    "        }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9c790522",
   "metadata": {},
   "outputs": [],
   "source": [
    "numerical_data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "55dae5c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "year_iqr = IQR('year', price_selected)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "da428a76",
   "metadata": {},
   "outputs": [],
   "source": [
    "year_iqr.calculate_iqr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2ae4d344",
   "metadata": {},
   "outputs": [],
   "source": [
    "year_iqr.outliers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f5b88149",
   "metadata": {},
   "outputs": [],
   "source": [
    "year_iqr.outliers['price'].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "256f3b6b",
   "metadata": {},
   "outputs": [],
   "source": [
    "year_iqr.outliers.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "06d75e9e",
   "metadata": {},
   "outputs": [],
   "source": [
    "year_selected = price_selected.iloc[~price_selected.index.isin(year_iqr.outliers.index)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b3fdaf7e",
   "metadata": {},
   "outputs": [],
   "source": [
    "year_selected"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "71363c04",
   "metadata": {},
   "outputs": [],
   "source": [
    "len(year_selected)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "540f72f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.hist(year_selected['year'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e04de7fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.boxplot(year_selected['year'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e7f88d82",
   "metadata": {},
   "outputs": [],
   "source": [
    "numerical_data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0f59f2cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "odometer_iqr = IQR('odometer', year_selected)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "043a496e",
   "metadata": {},
   "outputs": [],
   "source": [
    "odometer_iqr.calculate_iqr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e5acbebe",
   "metadata": {},
   "outputs": [],
   "source": [
    "odometer_iqr.outliers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dd9e056f",
   "metadata": {},
   "outputs": [],
   "source": [
    "odometer_iqr.outliers.describe()['odometer']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "09c61ccc",
   "metadata": {},
   "outputs": [],
   "source": [
    "odometer_selected = year_selected[year_selected['odometer']<600000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "98ae936b",
   "metadata": {},
   "outputs": [],
   "source": [
    "odometer_selected"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "525940a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.hist(odometer_selected['odometer'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "42200da0",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.boxplot(odometer_selected['odometer'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d9841b7e",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, axes = plt.subplots(3,2, figsize=(10, 10))\n",
    "\n",
    "sns.kdeplot(odometer_selected['price'], fill=True, ax=axes[0,0])\n",
    "sns.kdeplot(odometer_selected['year'], fill=True, ax=axes[0,1])\n",
    "sns.kdeplot(odometer_selected['odometer'], fill=True, ax=axes[1,0])\n",
    "\n",
    "\n",
    "fig.suptitle('Distribution of Numerical Features in Final Dataset', fontsize=16)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e65a3169",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, axes = plt.subplots(3,2, figsize=(10, 10))\n",
    "\n",
    "axes[0,0].boxplot(odometer_selected['price'])\n",
    "axes[0,1].boxplot(odometer_selected['year'])\n",
    "axes[1,0].boxplot(odometer_selected['odometer'])\n",
    "\n",
    "axes[0, 0].set_title('price')\n",
    "axes[0, 1].set_title('year')\n",
    "axes[1, 0].set_title('odometer')\n",
    "\n",
    "plt.suptitle('Boxplots of Numerical Features in Final Dataset', fontsize=16)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8ca2b86b",
   "metadata": {},
   "outputs": [],
   "source": [
    "numerical_selected = odometer_selected.reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f7d5978b",
   "metadata": {},
   "outputs": [],
   "source": [
    "numerical_selected"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "09b0cf93",
   "metadata": {},
   "outputs": [],
   "source": [
    "numerical_selected['index'].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8dbaf99d",
   "metadata": {},
   "outputs": [],
   "source": [
    "categorical_data = categorical_data.iloc[numerical_selected['index'].values]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b2f3d337",
   "metadata": {},
   "outputs": [],
   "source": [
    "categorical_data = categorical_data.reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c81c9373",
   "metadata": {},
   "outputs": [],
   "source": [
    "categorical_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "edb7a6dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "df2 = pd.concat([numerical_selected, categorical_data], axis=1)\n",
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d4405aaa",
   "metadata": {},
   "outputs": [],
   "source": [
    "df2.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "60c89480",
   "metadata": {},
   "outputs": [],
   "source": [
    "categorical_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "347ed3c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = plt.figure(figsize=(10,20))\n",
    "\n",
    "ax1 = plt.subplot(5,2,1)\n",
    "categorical_data['manufacturer'].value_counts().to_frame().plot(kind = 'bar', ax=ax1)\n",
    "\n",
    "ax2 = plt.subplot(5,2,2)\n",
    "categorical_data['model'].value_counts().to_frame().plot(kind = 'bar', ax=ax2)\n",
    "\n",
    "ax3 = plt.subplot(5,2,3)\n",
    "categorical_data['condition'].value_counts().to_frame().plot(kind = 'bar', ax=ax3)\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "536e11ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "df2_categorical = list(df2.columns[df2.dtypes=='object'])\n",
    "df2_categorical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f9e088de",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = plt.figure(figsize=(10,20))\n",
    "\n",
    "for i in df2_categorical:\n",
    "    ax = plt.subplot(5,2,df2_categorical.index(i)+10)\n",
    "    df2.pivot_table(values='price', index=i, aggfunc='mean').sort_values(by='price').plot(kind='bar', ax=ax)\n",
    "    plt.title('Average Price per {}'.format(i))\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c5f11072",
   "metadata": {},
   "outputs": [],
   "source": [
    "df2_numerical = list(df2.columns[df2.dtypes!='object'])\n",
    "df2_numerical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8314f352",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = plt.figure(figsize=(10,20))\n",
    "\n",
    "for i in df2_numerical:\n",
    "    ax = plt.subplot(4,2,df2_numerical.index(i)+8)\n",
    "    sns.scatterplot(x=df2[i], y=df2['price'], ax=ax)\n",
    "    \n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "563e111d",
   "metadata": {},
   "outputs": [],
   "source": [
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0accfd9c",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df2.iloc[:,1:]\n",
    "y = df2['price']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8893e7fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=99)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "64c62550",
   "metadata": {},
   "outputs": [],
   "source": [
    "sns.pairplot(X_train)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a0db5054",
   "metadata": {},
   "outputs": [],
   "source": [
    "corr_matrix = df2.corr(numeric_only=True)\n",
    "mask = np.triu(np.ones_like(corr_matrix, dtype=bool),k=1)\n",
    "plt.figure(figsize=(8,6))\n",
    "sns.heatmap(corr_matrix,annot=True,cmap='RdBu',vmin=-1,vmax=1,mask=mask)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9ba323fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_numeric_train = X_train.select_dtypes('number')\n",
    "x = sm.add_constant(x_numeric_train)\n",
    "results = sm.OLS(y_train,x).fit()\n",
    "results.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0baa3a8b",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_numeric_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "77b463d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "mutual_info = mutual_info_regression(x_numeric_train, y_train)\n",
    "mutual_info = pd.Series(mutual_info)\n",
    "mutual_info.index = x_numeric_train.columns\n",
    "mutual_info.sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d4b21802",
   "metadata": {},
   "outputs": [],
   "source": [
    "mutual_info.sort_values(ascending=False).plot(kind='bar')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f44b128e",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train.drop('odometer', axis=1, inplace=True)\n",
    "X_test.drop('odometer', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "86acd85d",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_numeric_train = X_train.select_dtypes('number')\n",
    "x = sm.add_constant(x_numeric_train)\n",
    "results = sm.OLS(y_train,x).fit()\n",
    "results.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "200481bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "categorical_preprocessor = Pipeline(\n",
    "    steps = [('ohe', OneHotEncoder(drop='first'))]\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cb5516fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "numerical_preprocessor = Pipeline(\n",
    "    steps = [('minmaxscaler' , MinMaxScaler())]\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "265bea10",
   "metadata": {},
   "outputs": [],
   "source": [
    "preprocessor = ColumnTransformer(\n",
    "    [('odometer', categorical_preprocessor, list(X_train.select_dtypes('object').columns)),\n",
    "    ('numerical', numerical_preprocessor, list(X_train.select_dtypes('number').columns))]   \n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cade715e",
   "metadata": {},
   "outputs": [],
   "source": [
    "preprocessor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "34b708b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "OneHotEncoder(handle_unknown='ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ec431e62",
   "metadata": {},
   "outputs": [],
   "source": [
    "OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b22ae0f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train_preproccessed = preprocessor.fit_transform(X_train)\n",
    "X_test_preproccessed = preprocessor.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cb3d0b62",
   "metadata": {},
   "outputs": [],
   "source": [
    "OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aa9751db",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train_preproccessed.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "38dda120",
   "metadata": {},
   "outputs": [],
   "source": [
    "cval = KFold(n_splits=5, shuffle=True, random_state=99)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2c2a3ec6",
   "metadata": {},
   "outputs": [],
   "source": [
    "models = []\n",
    "avg_errors = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f8bd8eeb",
   "metadata": {},
   "outputs": [],
   "source": [
    "lr = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d556a574",
   "metadata": {},
   "outputs": [],
   "source": [
    "errors_lr = -cross_val_score(estimator=lr,                  \n",
    "                X=X_train_preproccessed,\n",
    "                y=y_train,\n",
    "                cv=cval,\n",
    "                scoring='neg_root_mean_squared_error')\n",
    "\n",
    "print('Errors {}'.format(errors_lr))\n",
    "print()\n",
    "print('Avg_error {}'.format(np.mean(errors_lr)))\n",
    "\n",
    "avg_errors.append(np.mean(errors_lr))\n",
    "models.append('Linear Regression')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "97651946",
   "metadata": {},
   "outputs": [],
   "source": [
    "neighbors = []\n",
    "errors = []\n",
    "\n",
    "for i in range(1, 20):\n",
    "    knn = KNeighborsRegressor(n_neighbors=i)\n",
    "    model = knn.fit(X_train_preproccessed, y_train)\n",
    "    error = np.mean(-cross_val_score(estimator=model,                  \n",
    "                        X=X_train_preproccessed,\n",
    "                        y=y_train,\n",
    "                        cv=cval,\n",
    "                        scoring='neg_root_mean_squared_error'))\n",
    "    neighbors.append(i)\n",
    "    errors.append(error)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "45b43b69",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.plot(neighbors, errors)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d0fff157",
   "metadata": {},
   "outputs": [],
   "source": [
    "np.argmin(errors)+1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f1a4aa33",
   "metadata": {},
   "outputs": [],
   "source": [
    "knn = KNeighborsRegressor(n_neighbors=4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "55238d2b",
   "metadata": {},
   "outputs": [],
   "source": [
    "errors_knn = -cross_val_score(estimator=knn,                  \n",
    "                 X=X_train_preproccessed,\n",
    "                 y=y_train,\n",
    "                 cv=5,\n",
    "                 scoring='neg_root_mean_squared_error')\n",
    "\n",
    "print('Errors {}'.format(errors_knn))\n",
    "print()\n",
    "print('Avg_error {}'.format(np.mean(errors_knn)))\n",
    "\n",
    "avg_errors.append(np.mean(errors_knn))\n",
    "models.append('KNeighbors') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c1f08877",
   "metadata": {},
   "outputs": [],
   "source": [
    "dt = DecisionTreeRegressor(random_state=99)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b2f44080",
   "metadata": {},
   "outputs": [],
   "source": [
    "errors_dt = -cross_val_score(estimator=dt,                  \n",
    "                 X=X_train_preproccessed,\n",
    "                 y=y_train,\n",
    "                 cv=cval,\n",
    "                 scoring='neg_root_mean_squared_error')\n",
    "\n",
    "print('Errors {}'.format(errors_dt))\n",
    "print()\n",
    "print('Avg_error {}'.format(np.mean(errors_dt)))\n",
    "\n",
    "avg_errors.append(np.mean(errors_dt))\n",
    "models.append('Decision Tree')  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f119415a",
   "metadata": {},
   "outputs": [],
   "source": [
    "rf = RandomForestRegressor(random_state=99)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "513cb5f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "errors_rf = -cross_val_score(estimator=rf,                  \n",
    "                 X=X_train_preproccessed,\n",
    "                 y=y_train,\n",
    "                 cv=cval,\n",
    "                 scoring='neg_root_mean_squared_error')\n",
    "\n",
    "print('Errors {}'.format(errors_rf))\n",
    "print()\n",
    "print('Avg_error {}'.format(np.mean(errors_rf)))\n",
    "\n",
    "avg_errors.append(np.mean(errors_rf))\n",
    "models.append('Random Forest')  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0a35227d",
   "metadata": {},
   "outputs": [],
   "source": [
    "svr = SVR()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "425cacd8",
   "metadata": {},
   "outputs": [],
   "source": [
    "errors_svr = -cross_val_score(estimator=svr,                  \n",
    "                 X=X_train_preproccessed,\n",
    "                 y=y_train,\n",
    "                 cv=cval,\n",
    "                 scoring='neg_root_mean_squared_error')\n",
    "\n",
    "print('Errors {}'.format(errors_svr))\n",
    "print()\n",
    "print('Avg_error {}'.format(np.mean(errors_svr)))\n",
    "\n",
    "avg_errors.append(np.mean(errors_svr))\n",
    "models.append('SVR')  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cf7547e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "compare_models = pd.DataFrame({'Model':models, 'MSE':avg_errors}).sort_values(by='MSE', ascending=True)\n",
    "compare_models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1415ae2b",
   "metadata": {},
   "outputs": [],
   "source": [
    "compare_models.plot(kind = 'bar')\n",
    "plt.xlabel('Model')\n",
    "plt.ylabel('Mean Squared Error (MSE)')\n",
    "plt.title('Mean Squared Error for Different Models')\n",
    "plt.xticks(range(len(compare_models)) ,compare_models['Model'] ,rotation=45, ha='right')  # Rotate x-axis labels for better visibility\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8ba378d0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
